

Basic Programs:


Tasks from 13/05/2021 till Date



1. Write a program to print the table of a given Integer.

Code : Python

num = int(input("Multiplication table of:"))  
  
for i in range(1,11):  
   print(num,'x',i,'=',num*i)  
   
   


2. Write a program to print all factors of given number .

CODE : Python

# This function computes the factor of the argument passed
def print_factors(x):
   print("The factors of",x,"are:")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)

num = 320

print_factors(num)



3. Write a program to print the given string in reverse order without using any standard function like (String.reverse()).
Example : If the given string is "Astrea", your progrm should print "aertsa".


CODE : Python 

my_string=("Nitesh Jhawar")
str=""
for i in my_string:
    str=i+str
print("Reversed string:",str)




4. Write a program to print an Integer in reverse order.
Example : If the given integer is 2050, your program should print 0502.



CODE : Python 


number = int(input("Enter the integer number: "))  
  
# Initiate value to null  
revs_number = 0  
  

  
while (number > 0):  
    # Logic  
    remainder = number % 10  
    revs_number = (revs_number * 10) + remainder  
    number = number // 10  
  
# Display the result  
print("The reverse number is : {}".format(revs_number))  



5. Write a program to print the 10 terms of following series :
1,5,10,50,100,500,1000,........



CODE : Python - Doubtful



n = 10
for i in range(1,3):
  print(i,",",end='\t')
  i = i*5
  print(i,",",end='\t')
  i = i*2
  print(i,",",end="\t")

  for i in range(i,n+1):

  
    i = i*5
    print(i,",",end='\t')
    i = i*2
    print(i,",",end="\t")
    
    
    
    
    
    


(24/05/2021)



1.  Write a program to print the table of a given Integer.



CODE:


public class PracticeQuestions {


public static void MultiplicationTable() {

       Integer no =2;
       for (Integer i=0;i<11;i++){
       
       
       System.debug(no+'X'+i+'='+no*i);
       
       
       }

        
        
        
    }
 

}




2. Finding factors of a number:



public class PracticeQuestion2 {

public static void Factor() {

       Integer no =2;
    System.debug('Getting the factors:');
     for (Integer i=0;i< no;i++){
         
         if(math.mod(no,i)==0 ){
             System.debug(i);
         }
       
     }
    
}
}




3. Reverse of a Integer :


public class PracticeQuestion3 {

    
public static void ReverseOfInteger() {

String original= 'abcdef';
String revStr = ' ';

for (Integer i = original.length()-1; i >= 0; i--)
{
	revStr += original.substring(i, i+1);
}

system.debug(revStr );
       
       }
       
       
       

4. Reverse of an String:



public class PracticeQuestion4 {
 
    
public static void ReverseOfString() {
    
String original= 'abcdef';
String revStr = ' ';

for (Integer i = original.length()-1; i >= 0; i--)
{
	revStr += original.substring(i, i+1);
}

system.debug(revStr );

}
    
  
}






(26/05/2021)


1. Find 10 random Accounts from your org and print it one by one. 



public class SOQL1 {


public static void GetRandom(){
    
Integer count = [SELECT COUNT() FROM Contact];
Integer rand = Math.floor(Math.random() * count).intValue();
Contact c = [SELECT Name FROM Contact LIMIT 1 OFFSET :rand];
    
System.debug(c);

}
    
    
}



2. Find 10 Accounts which are created recently and print them one by one.


public class SOQL2  {

public static void displayAccounts(){
List<Account> acc=[Select Id,Name from Account];
for(Account a:acc){
List<Contact> con=[Select LastName from contact where AccountId=:a.id];
for(Contact c:con){
if(con.size()>1){
System.debug('AccountName '+''+a.Name+'RelatedContacts '+''+c.LastName);
}}}}}








(27/05/2021)



1. Find all contacts related to give Account and print them one by one.

public class SOQL3 {
    public  Id accountid;
    public  List<Account> lst_acc;
   
   public void contactFieldsConcat(Id accid){
        accountid = accid;
        string query ='select id, name, (select id, name from Contacts) from account where id =: '+accountid;
        lst_acc = Database.query(query);
        system.debug(lst_acc);
}

}




2. 


public class SOQL4 {
    
Integer numContacts = 0;
Integer numOpps = 0;
public void getOpps(){
    
List<Account> someListOfAccountIds;

List<Account> targetAccounts = [SELECT Id, Name, (SELECT Id FROM Contacts), (SELECT Id FROM Opportunities) FROM Account WHERE Id IN :someListOfAccountIds];

for(Account myAccount :targetAccounts){
    
    numContacts = myAccount.Contacts.size();
    numOpps = myAccount.Opportunities.size();

    

}

}
}






(28/05/2021)



1) Find the count of Opportunity which has 'Opp' in name.

public class SOQL7 {

    
public void noOfOp(){
List<Account> accounts = [SELECT Id, Name, (SELECT id FROM Contacts), (SELECT id FROM opportunities) FROM Account ];

for (Account a : accounts) {
     System.debug('Count of Opportunities is ' + a.Opportunities.size());
     
}
    }
}




2)  Find the count of Open Opportunities.


public class SOQL8 {
    
public static void getOpen(){
for(AggregateResult oppRec : [SELECT Count(Id) , Name FROM Opportunity Where  Status_c__c = 'open' GROUP BY Account__c]){
System.debug('Count'+oppRec);
}

}
    
}



3)  Find the count of Open Opportunities whose Amount > $100.

public class SOQL9 {
   
public void noOfOpenOp(){
    
List<Account> accounts = [SELECT Id, Name, (SELECT id FROM Contacts), (SELECT id FROM opportunities) FROM Account where Amount__c >'100'];

for (Account a : accounts) {
     System.debug('Count of Opportunities is ' + a.Opportunities.size());
     
}
    }
}











(31/05/2021)



1. Create an apex class "CreateAccountRelatedRecords" and a static method with Name "CreateAccount" and write the logic to create 10 Accounts.


public class CreateAccountRelatedRecords {
    
 public  static void CreateAccount(String name){
     
     
 List<Account> lstTesting = new List<Account>();    
 
       
for(Integer i=1;i<=10;i++)
{
    
Account a = new Account();
a.name = name;
lstTesting.add(a);
}
insert lstTesting;
     
       
       
       


 }

}





2. Create a method "CreateContactsWithAccount" in class "CreateAccountRelatedRecords" which will create 10 Account with 5 contacts in each Account.



public static AggregateResult[]  CreateContactsWithAccount(){
        
    return [SELECT accountid idsss, count(id) contactssss FROM Contact GROUP BY Accountid HAVING count(id) =5 ];
        }
    }






3.  Create a method "CreateOppsWithAccount" in class "CreateAccountRelatedRecords" which will create 10 Account with 5 Opportunities in each Account.


public  static AggregateResult[]  CreateOppsWithAccount(){
        
        return [SELECT accountid idsss, count(id) contactssss FROM Opportunity GROUP BY Accountid HAVING count(id) =5 ];
        

    
    
    }
    
    
    
    
    
4. Create a method "CalculateOppAmountSum" in class "CreateAccountRelatedRecords" which will calculate the total sum of amount of Opportunities of given Account.



public static  double  CalculateOppAmountSum()
        
    {
        
double  grandTotal;
AggregateResult[] groupedResults = [SELECT sum(Total_amount__c) sum FROM Opportunity];
grandTotal = double.valueOf(groupedResults[0].get('sum'));
    
    
 
    return grandTotal;
    }
    









(01/06/2021)



1) Create a method "CreateCases" in class "CreateAccountRelatedRecords" which will create 5 case records with all fields fields in.



public static  void CreateCases(List<Account> accounts){
        
        
     
       List<Case> casesToCreate = new List<Case>();

       
       for(Account acc:accounts){
           
           if(acc.Name == 'CreateCase'){
              
               Case caseToAdd = new Case();

               caseToAdd.Name__c = 'Test';
               caseToAdd.Custom_Field__c = 'Something';
               casesToCreate.add(caseToAdd);}

              

    }
           
       }
     




2) Create a method "CreateReqNoOfContacts" in class "CreateAccountRelatedRecords" which will create 9 Account with suffix 1,2,3,4,5,6,7,8 and 9 in Account Name and susuffix number of Contacts for corresponding Account.



public static void  CreateReqNoOfContacts(String name){
        
        
 List<Account> listing = new List<Account>();    
 
       
for(Integer i=1;i<=9;i++)
{
    
Account a = new Account();
a.name = name + i;
listing.add(a);
}
insert listing;
     
       
       
       


        
        

    }
     






(02/06/2021)



1) Create a custom field "Send Welcome Email" (Checkbox) on Contact.
Create a workflow to update the field "Send Welcome Email" to true if a new Contact is created with valid Account.



2) Create a workflow which will send a welcome email to Contact's email address whenever a new contact is created with "Send Welcome Email" = true.

Email Details :
Subject - Welcome email - Test
Body :

Hi {Contact Name},

This is welcome email for you. You are now part of {Account Name}.

Person Details : 
Name : {Contact Name}
DOB : {Contact DOB}
Company : {Account Name}
Email : {Contact Email}


Thanks








(03/06/2021)



1) Write a Batch Class (AccountUpdateBatch) to update the following fields :
    1) NumberofEmployees - Total number of contacts related to that Account. If no related conatct is there then value should be 0.
    2) Number of Opportunity- Total number of opportunity related to that Account. If no related opportunity is there then value should be 0.
    

CODE: 


global class AccountUpdateBatch implements Database.Batchable<sObject>
{
global Database.QueryLocator start(Database.BatchableContext bc)
{
    return Database.getQueryLocator([select Id,(Select Id from Contacts),(Select Id from Opportunities) from Account]);
    
}
    global void execute(Database.BatchableContext bc,List<account> acclist)
    {
        list<account> listaccount=new list<account>();
        list<Account> accountlist=[select id,name,NumberOfEmployees,(select id from contacts),(Select Id from Opportunities)from account where id=:acclist];
       
    for(account acc:accountlist){
        
        Account ac1=new account();
        if(acc.contacts.size()!=null){
        ac1.id=acc.id;
        ac1.NumberOfEmployees=acc.contacts.size();
        listaccount.add(ac1);
        }
        else{
            ac1.NumberOfEmployees=0;
        }
        if(acc.opportunities.size()!=null){
            ac1.id=acc.id;
            ac1.Number_Of_Opportunity__c=acc.Opportunities.size();
        }
        else{
            ac1.Number_Of_Opportunity__c=0;
        }
        update listaccount;
    }
    }
        global void finish(Database.BatchableContext bc)
        {
            
        }
   
       
}



2. Write the schedular class of above Batch (AccountUpdateBatch) to schedule this batch every 10th of the month.



CODE:

global class AccountUpdateBatchScheduleclass implements Schedulable {
 global void execute(SchedulableContext sc){
       AccountUpdateBatch aubt=new AccountUpdateBatch();
     database.executeBatch(aubt,10);
       }
}



Anonymous Window 

AccountUpdateBatchScheduleclass aubtsc=new AccountUpdateBatchScheduleclass();
        String sch='0 0 0 10 * ?';
        String jobId=system.Schedule('Schedule at every 10th of month',sch,aubtsc);
        
        
        
        


(04/06/2021)



1. Write a batch class to update IsReminderSet field to true when the DueDate is passed and task status is not completed.

CODE:

global class updateTask implements Database.Batchable<sObject>
{
    global Database.QueryLocator start(Database.BatchableContext bc){
        system.debug([select IsReminderSet,ActivityDate,status from Task]);
        return Database.getQueryLocator([select Subject,IsReminderSet,ActivityDate,status from Task]);
        
    }
    global void execute(database.BatchableContext bc,list<Task> tasklist){
        //Date duedate;
        system.debug('list'+tasklist);
        list<Task> tlist=new list<Task>();
        list<Task> tlistquery=[select Subject,Id,IsReminderSet,ActivityDate,Status from Task where id In:tasklist];
        system.debug(tlistquery);
        for(task t:tlistquery){
            system.debug(t.Subject);
            if(t.status!='Completed'){
                t.IsReminderSet=true;
                tlist.add(t);
                
            }
            update tlist;
             
        }
        
       
    }
    
    global void finish(Database.BatchableContext bc){
        
    }
}



2. Write the schedular class of above Batch  to schedule this batch daily.


global class updateTaskScheduler implements schedulable{
global void execute(SchedulableContext sc){
       updateTask ut=new updateTask();
}
}

ANONYMOUS WINDOW

updateTaskScheduler utsc=new updateTaskScheduler();
        String sch='0 0 0 * * ?';
        String jobId=system.Schedule('Schedule daily',sch,utsc);
        
        
        
        
        
        
        
(07/06/2021)



1. Create a checkbox field (Name = Create Default Contacts) on Account.
Write a trigger on Account to create default Contacts (Number of Contact = number of employees on Account) related to that Account if Create Default Contacts = true for that Account.



CODE:


trigger trigger1 on Account (after insert,after update){
   list<contact> listContact = new list<contact>();
     
    map<id,decimal> mapAcc = new map<id,decimal>();
    if(Trigger.isafter && Trigger.isInsert){
    for(Account acc:trigger.new){
        if(acc.create_default_contact__c==true){ 
        mapAcc.put(acc.id,acc.NumberOfEmployees);
        }
    }
    }
     
    if(mapAcc.size()>0 && mapAcc!=null){
         
        for(Id accId:mapAcc.keyset()){
             
            for(integer i=0;i<mapAcc.get(accId);i++){
                 
                contact newContact=new contact();
                 
                newContact.accountid=accId;
                 
                newContact.lastname='contact'+i;
                 
                listContact.add(newContact);
                 
            }
        }
    }
    if(listContact.size()>0){      
insert listContact;
    }  
}


   
   
   
2.Write a trigger to update Account's Standard Field Employees whose value will equal to number of Contacts related to that Account.


CODE:


trigger trigger2 on Contact (after insert,after update) {
map<Id,list<Contact>> conmap=new map<Id,list<contact>>();
    for(Contact con:trigger.new){
        if(!conmap.containsKey(con.AccountId)){
            conmap.put(con.AccountId, new list<contact>());
        }
        else{
            conmap.get(con.AccountId).add(con);
        }
    }
    list<account> listaccount=new list<account>();
    list<Account> acclist=[select id,name,NumberOfEmployees,(select id from contacts)from account where id=:conmap.keySet()];
    for(account acc:acclist){
        Account ac1=new account();
        ac1.id=acc.id;
        ac1.NumberOfEmployees=acc.contacts.size();
        listaccount.add(ac1);
    }
   update listaccount;
}








(08/06/2021)


1. Create a currency field "Total Amount" on Account and write a trigger to update that field whose value will be equal to sum of Amount of all opportunities related to that Account.

CODE:

trigger trigger3 on Opportunity (after insert,after update) {
set<id> accids=new set<id>();
    for(opportunity opp:trigger.new){
        if(opp.AccountId!=null){
            accids.add(opp.AccountId);
        }
    }
    list<account> accountlist=new list<Account>();
    map<Id,Decimal> mapamt=new map<Id,Decimal>();
    list<opportunity> opplist=[select Id,Amount,AccountId from opportunity where AccountId In:accids];
    for(Opportunity o:opplist){
        Decimal Sum=0;
        if(mapamt.containsKey(o.AccountId)){
            sum=mapamt.get(o.AccountId);
        }
        if(o.Amount!=null){
            sum=sum+o.Amount;
        }
        mapamt.put(o.AccountId,sum);
    }
    if(mapamt.size()>0){
        for(Id i:mapamt.keySet()){
            Account a=new Account();
            a.id=i;
            a.Total_Amount__c=mapamt.get(i);
            accountlist.add(a);
            }
    }
    if(accountlist.size()>0){
        update accountlist;
    }
}





2. Create an Number field (Total Products) on Account. Write a trigger to update that field whose value will be equal to number of OpportunityLineItems related to that Account.

CODE:


trigger trigger4 on OpportunityLineItem (after insert,after update) {
    if(trigger.isInsert && trigger.isAfter){
        map<Id,list<opportunityLineItem>> mapcount=new map<Id,list<opportunityLineItem>>();
        for(opportunityLineItem oli:trigger.new){
            if(!mapcount.containsKey(oli.OpportunityId))
            {
                mapcount.put(oli.opportunityId,new list<opportunityLineItem>());
            }
           
            else{
                mapcount.get(oli.OpportunityId).add(oli);
                   }
        }
        List<OpportunityLineItem> olilist = new List<OpportunityLineItem>([SELECT Opportunity.AccountId FROM OpportunityLineItem WHERE Id IN: mapcount.keySet()]);
Set<Id> accountIds = new Set<Id>();
for(OpportunityLineItem o : olilist){
   accountIds.add(o.Opportunity.AccountId);
}
        
        list<AggregateResult> listofoli=[select count(Id) numberofoli from OpportunityLineItem where Opportunity.AccountId=:accountIds GROUP BY Opportunity.AccountId];
        list<Account> acclist=new list<Account>();
        for(AggregateResult arr:listofoli){
            
           Account a=new Account();
            a.Id=arr.Id;
        
        a.Total_Products__c=listofoli.size();
        acclist.add(a);
        }
        if(acclist.size()>0){
            update acclist;
        }
    }
}







(09/06/2021)



1. Write a trigger to not allow to delete Account which has Open Opportunities. Error message should be :
"Sorry ! You can't delete this Account as it has N number of open deals."

Note:- N is the total number of Open Opportunities related to that Account.


CODE:

trigger trigger5 on Account (before delete) {
  list<AggregateResult> oppRec = [SELECT Count(Id) oppsize FROM Opportunity Where AccountID =: trigger.old and isclosed=false];
        integer N=integer.valueOf(oppRec[0].get('oppsize'));
for (Account a : [SELECT Id FROM Account WHERE Id IN (SELECT AccountId FROM Opportunity where isClosed=false) AND Id IN :Trigger.old]) { 
        Trigger.oldMap.get(a.Id).addError('Sorry ! You cannot delete this Account as it has' + N + 'number of open deals');
}   }






2. Create a new field "High Priority Opp" (Lookup(Opp)) on Account and write a trigger to update this field with open opportunity which has maximum amount related to the account.


CODE:


trigger trigger6 on Opportunity (after insert,after update) {
Set<Id> accIdSet = new Set<Id>();
    Map<Id, Id> mapOfAccIdAndOppName = new Map<Id, Id>();
    List<Account> accListToUpdate = new List<Account>();

    for (Opportunity opp : Trigger.new){
      if(opp.AccountId != null){
        accIdSet.add(opp.AccountId); 
      }
    }
list<Opportunity> opplist=[SELECT Name, Amount,opportunity.AccountId FROM Opportunity WHERE opportunity.AccountId IN: accIdSet and opportunity.isClosed=false ORDER BY Amount DESC nulls last];
    system.debug('mapfAccidAndOppName'+ mapOfAccIdAndOppName);
    system.debug('opplist of Name & amount' +opplist);
    system.debug('accIdset'+accIdset);
    for(Opportunity op: opplist){
      if(!mapOfAccIdAndOppName.containsKey(op.AccountId) && op.Amount != NULL){
        mapOfAccIdAndOppName.put(op.AccountId, op.Id);
      }
    }

    if(!mapOfAccIdAndOppName.isEmpty()){
      for(Id accId : mapOfAccIdAndOppName.keySet()){
          Account acc=new Account();
          acc.id=accid;
          acc.High_Priority_Opp__c=mapOfAccIdAndOppName.get(accId);
          accListToUpdate.add(acc);
       // accListToUpdate.add(new Account(Id = accId, High_Priority_Opp__c = mapOfAccIdAndOppName.get(accId)));
      }
    }
    if(!accListToUpdate.isEmpty()){
      update accListToUpdate;
    }
}






(10/06/2021)


1)  Write a trigger to not allow creation of duplicate Account (On the basis of Account Name).

METHOD 1:
trigger trigger7 on Account (before insert) {
set<String> accnames=new set<String>();
    for(account acc:trigger.new){
        accnames.add(acc.Name);
    }
    system.debug('set'+ accnames);
    list<Account> acclist=new list<Account>();
    acclist=[select Id,Name from Account where Name IN: accnames];
       
    for(Account acc:trigger.new){
        if(acclist.size()>0){
            acc.Name.addError('duplicate name');
        }
    }
    system.debug('list'+acclist);
    }
    
   METHOD 2 USING MAP:
   
 Map<String, Account> accMap = new Map<String, Account>();
    for (Account acc : System.Trigger.new) {
         if (accMap.containsKey(acc.Name)) {
                acc.Name.addError('Another account has the ' + acc.Name + ' same name.');
            } else {
                accMap.put(acc.Name, acc);
            }
    }
     list<Account> acclist=[SELECT Name FROM Account WHERE Name IN :accMap.KeySet()]; 
    for (Account acc : acclist) {
        Account newAcc = accMap.get(acc.Name);
         newAcc.Name.addError('An account with this name ' + acc.Name + ' already exists.');
                        }
}
    




