

Basic Programs:


Tasks from 13/05/2021 till Date



1. Write a program to print the table of a given Integer.

Code : Python

num = int(input("Multiplication table of:"))  
  
for i in range(1,11):  
   print(num,'x',i,'=',num*i)  
   
   


2. Write a program to print all factors of given number .

CODE : Python

# This function computes the factor of the argument passed
def print_factors(x):
   print("The factors of",x,"are:")
   for i in range(1, x + 1):
       if x % i == 0:
           print(i)

num = 320

print_factors(num)



3. Write a program to print the given string in reverse order without using any standard function like (String.reverse()).
Example : If the given string is "Astrea", your progrm should print "aertsa".


CODE : Python 

my_string=("Nitesh Jhawar")
str=""
for i in my_string:
    str=i+str
print("Reversed string:",str)




4. Write a program to print an Integer in reverse order.
Example : If the given integer is 2050, your program should print 0502.



CODE : Python 


number = int(input("Enter the integer number: "))  
  
# Initiate value to null  
revs_number = 0  
  

  
while (number > 0):  
    # Logic  
    remainder = number % 10  
    revs_number = (revs_number * 10) + remainder  
    number = number // 10  
  
# Display the result  
print("The reverse number is : {}".format(revs_number))  



5. Write a program to print the 10 terms of following series :
1,5,10,50,100,500,1000,........



CODE : Python - Doubtful



n = 10
for i in range(1,3):
  print(i,",",end='\t')
  i = i*5
  print(i,",",end='\t')
  i = i*2
  print(i,",",end="\t")

  for i in range(i,n+1):

  
    i = i*5
    print(i,",",end='\t')
    i = i*2
    print(i,",",end="\t")
    
    
    
    
    
    


(24/05/2021)



1.  Write a program to print the table of a given Integer.



CODE:


public class PracticeQuestions {


public static void MultiplicationTable() {

       Integer no =2;
       for (Integer i=0;i<11;i++){
       
       
       System.debug(no+'X'+i+'='+no*i);
       
       
       }

        
        
        
    }
 

}




2. Finding factors of a number:



public class PracticeQuestion2 {

public static void Factor() {

       Integer no =2;
    System.debug('Getting the factors:');
     for (Integer i=0;i< no;i++){
         
         if(math.mod(no,i)==0 ){
             System.debug(i);
         }
       
     }
    
}
}




3. Reverse of a Integer :


public class PracticeQuestion3 {

    
public static void ReverseOfInteger() {

String original= 'abcdef';
String revStr = ' ';

for (Integer i = original.length()-1; i >= 0; i--)
{
	revStr += original.substring(i, i+1);
}

system.debug(revStr );
       
       }
       
       
       

4. Reverse of an String:



public class PracticeQuestion4 {
 
    
public static void ReverseOfString() {
    
String original= 'abcdef';
String revStr = ' ';

for (Integer i = original.length()-1; i >= 0; i--)
{
	revStr += original.substring(i, i+1);
}

system.debug(revStr );

}
    
  
}






(26/05/2021)


1. Find 10 random Accounts from your org and print it one by one. 



public class SOQL1 {


public static void GetRandom(){
    
Integer count = [SELECT COUNT() FROM Contact];
Integer rand = Math.floor(Math.random() * count).intValue();
Contact c = [SELECT Name FROM Contact LIMIT 1 OFFSET :rand];
    
System.debug(c);

}
    
    
}



2. Find 10 Accounts which are created recently and print them one by one.


public class SOQL2  {

public static void displayAccounts(){
List<Account> acc=[Select Id,Name from Account];
for(Account a:acc){
List<Contact> con=[Select LastName from contact where AccountId=:a.id];
for(Contact c:con){
if(con.size()>1){
System.debug('AccountName '+''+a.Name+'RelatedContacts '+''+c.LastName);
}}}}}








(27/05/2021)



1. Find all contacts related to give Account and print them one by one.

public class SOQL3 {
    public  Id accountid;
    public  List<Account> lst_acc;
   
   public void contactFieldsConcat(Id accid){
        accountid = accid;
        string query ='select id, name, (select id, name from Contacts) from account where id =: '+accountid;
        lst_acc = Database.query(query);
        system.debug(lst_acc);
}

}




2. 


public class SOQL4 {
    
Integer numContacts = 0;
Integer numOpps = 0;
public void getOpps(){
    
List<Account> someListOfAccountIds;

List<Account> targetAccounts = [SELECT Id, Name, (SELECT Id FROM Contacts), (SELECT Id FROM Opportunities) FROM Account WHERE Id IN :someListOfAccountIds];

for(Account myAccount :targetAccounts){
    
    numContacts = myAccount.Contacts.size();
    numOpps = myAccount.Opportunities.size();

    

}

}
}






(28/05/2021)



1) Find the count of Opportunity which has 'Opp' in name.

public class SOQL7 {

    
public void noOfOp(){
List<Account> accounts = [SELECT Id, Name, (SELECT id FROM Contacts), (SELECT id FROM opportunities) FROM Account ];

for (Account a : accounts) {
     System.debug('Count of Opportunities is ' + a.Opportunities.size());
     
}
    }
}




2)  Find the count of Open Opportunities.


public class SOQL8 {
    
public static void getOpen(){
for(AggregateResult oppRec : [SELECT Count(Id) , Name FROM Opportunity Where  Status_c__c = 'open' GROUP BY Account__c]){
System.debug('Count'+oppRec);
}

}
    
}



3)  Find the count of Open Opportunities whose Amount > $100.

public class SOQL9 {
   
public void noOfOpenOp(){
    
List<Account> accounts = [SELECT Id, Name, (SELECT id FROM Contacts), (SELECT id FROM opportunities) FROM Account where Amount__c >'100'];

for (Account a : accounts) {
     System.debug('Count of Opportunities is ' + a.Opportunities.size());
     
}
    }
}











(31/05/2021)



1. Create an apex class "CreateAccountRelatedRecords" and a static method with Name "CreateAccount" and write the logic to create 10 Accounts.


public class CreateAccountRelatedRecords {
    
 public  static void CreateAccount(String name){
     
     
 List<Account> lstTesting = new List<Account>();    
 
       
for(Integer i=1;i<=10;i++)
{
    
Account a = new Account();
a.name = name;
lstTesting.add(a);
}
insert lstTesting;
     
       
       
       


 }

}





2. Create a method "CreateContactsWithAccount" in class "CreateAccountRelatedRecords" which will create 10 Account with 5 contacts in each Account.



public static AggregateResult[]  CreateContactsWithAccount(){
        
    return [SELECT accountid idsss, count(id) contactssss FROM Contact GROUP BY Accountid HAVING count(id) =5 ];
        }
    }






3.  Create a method "CreateOppsWithAccount" in class "CreateAccountRelatedRecords" which will create 10 Account with 5 Opportunities in each Account.


public  static AggregateResult[]  CreateOppsWithAccount(){
        
        return [SELECT accountid idsss, count(id) contactssss FROM Opportunity GROUP BY Accountid HAVING count(id) =5 ];
        

    
    
    }
    
    
    
    
    
4. Create a method "CalculateOppAmountSum" in class "CreateAccountRelatedRecords" which will calculate the total sum of amount of Opportunities of given Account.



public static  double  CalculateOppAmountSum()
        
    {
        
double  grandTotal;
AggregateResult[] groupedResults = [SELECT sum(Total_amount__c) sum FROM Opportunity];
grandTotal = double.valueOf(groupedResults[0].get('sum'));
    
    
 
    return grandTotal;
    }
    









(01/06/2021)



1) Create a method "CreateCases" in class "CreateAccountRelatedRecords" which will create 5 case records with all fields fields in.



public static  void CreateCases(List<Account> accounts){
        
        
     
       List<Case> casesToCreate = new List<Case>();

       
       for(Account acc:accounts){
           
           if(acc.Name == 'CreateCase'){
              
               Case caseToAdd = new Case();

               caseToAdd.Name__c = 'Test';
               caseToAdd.Custom_Field__c = 'Something';
               casesToCreate.add(caseToAdd);}

              

    }
           
       }
     




2) Create a method "CreateReqNoOfContacts" in class "CreateAccountRelatedRecords" which will create 9 Account with suffix 1,2,3,4,5,6,7,8 and 9 in Account Name and susuffix number of Contacts for corresponding Account.



public static void  CreateReqNoOfContacts(String name){
        
        
 List<Account> listing = new List<Account>();    
 
       
for(Integer i=1;i<=9;i++)
{
    
Account a = new Account();
a.name = name + i;
listing.add(a);
}
insert listing;
     
       
       
       


        
        

    }
     






(02/06/2021)



1) Create a custom field "Send Welcome Email" (Checkbox) on Contact.
Create a workflow to update the field "Send Welcome Email" to true if a new Contact is created with valid Account.



2) Create a workflow which will send a welcome email to Contact's email address whenever a new contact is created with "Send Welcome Email" = true.

Email Details :
Subject - Welcome email - Test
Body :

Hi {Contact Name},

This is welcome email for you. You are now part of {Account Name}.

Person Details : 
Name : {Contact Name}
DOB : {Contact DOB}
Company : {Account Name}
Email : {Contact Email}


Thanks


